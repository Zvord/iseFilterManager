using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Windows;
using Microsoft.Win32;
using Ookii.Dialogs.Wpf;
using System.IO;


namespace iseFilterManager
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        SaveFileDialog SaveDialog;
        VistaFolderBrowserDialog OpenFolderDialog;
        string FiltersPath;
        
        public Tuple<bool, List<string>> DialogTuple;
        List<Filter> Filters;
        List<Warning> Warnings;

        public MainWindow()
        {
            InitializeComponent();
            SaveDialog = new SaveFileDialog();
            OpenFolderDialog = new VistaFolderBrowserDialog();
            Filters = new List<Filter>();
            //this.ResizeMode = ResizeMode.CanMinimize;
            TableFilters.ItemsSource = Filters;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            var result = OpenFolderDialog.ShowDialog();
            if (result != true)
                return;
            string folder = OpenFolderDialog.SelectedPath;
            string reportPath = Path.Combine(folder, "_xmsgs", "xst.xmsgs");
            FiltersPath = Path.Combine(folder, "iseconfig", "filter.filter");
            if (!File.Exists(reportPath))
            {
                MessageBox.Show("Run synthesis first");
                return;
            }
            LoadWarnings(reportPath);
            if (!File.Exists(FiltersPath))
                return;
            LoadFilters(FiltersPath);
            File.Copy(FiltersPath, FiltersPath + "_bak", true);
        }

        private void LoadWarnings(string filename)
        {
            string content = File.ReadAllText(filename);
            Warnings = ReportParser.Main(content);
            LabelCount.Content = "Total warnings: " + Warnings.Count.ToString();
            Table.ItemsSource = Warnings;
        }

        private void LoadFilters(string filename)
        {
            Regex regex = new Regex(@"<filter.*?</filter>");
            string content = File.ReadAllText(filename);
            var ms = regex.Matches(content);
            foreach (Match m in ms)
            {
                Filter filter = new Filter(m.Value);
                AddFilter(filter);
            }
            TableFilters.Items.Refresh();
        }

        private void ButtonAddFilter_Click(object sender, RoutedEventArgs e)
        {
            Warning warn = Table.SelectedItem as Warning;
            if (warn == null)
                return;
            WindowInputFilter win = new WindowInputFilter(warn.Arguments);
            win.ShowDialog();
            if (DialogTuple.Item1 == false)
                return;
            Filter filter = new Filter(warn.Source, warn.Number, DialogTuple.Item2);
            AddFilter(filter);
            TableFilters.Items.Refresh();
        }

        private void ButtonSaveFilter_Click(object sender, RoutedEventArgs e)
        {
            string head = @"<!--                                                                                                 -->
<!--This is an internal file that has been generated by the Xilinx ISE software.  Any direct         -->
<!--editing of this file may result in data corruption or in unpredictable behavior.  It is strongly -->
<!--advised that users do not directly edit the contents of this file.                               -->
<!--                                                                                                 -->
<filters xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation='filter.xsd'>";
            List<string> filterList = new List<string>();
            filterList.Add(head);
            foreach (Filter f in Filters)
                filterList.Add(f.Full);
            filterList.Add("</filters>");
            File.WriteAllLines(FiltersPath, filterList.ToArray());
            MessageBox.Show("Filters saved");
        }

        private void AddFilter(Filter filter)
        {
            bool xz;
            if (Filters.Count > 0)
                xz = filter == Filters[0];
            if (!Filters.Contains(filter))
                Filters.Add(filter);
        }

        private void EditItem_Click(object sender, RoutedEventArgs e)
        {
            Filter filter = TableFilters.SelectedItem as Filter;
            if (filter == null)
                return;
            WindowInputFilter win = new WindowInputFilter(filter.Arguments);
            win.ShowDialog();
            if (DialogTuple.Item1 == false)
                return;
            filter.Arguments = DialogTuple.Item2;
            TableFilters.Items.Refresh();
        }

        private void DeleteItem_Click(object sender, RoutedEventArgs e)
        {
            Filter filter = TableFilters.SelectedItem as Filter;
            if (filter == null)
                return;
            Filters.Remove(filter);
            TableFilters.Items.Refresh();
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            double wGrid = this.Grid1.ActualWidth;
            double wTable = (wGrid - 30) / 2;
            Table.Width = wTable;
            TableFilters.Width = wTable;
        }

        private void CheckBoxFilters_Checked(object sender, RoutedEventArgs e)
        {
            if (Warnings == null || Filters == null)
                return;
            List<Warning> filtered = Warnings.FindAll(w => !Filter.FilterWarning(Filters, w));
            Table.ItemsSource = filtered;
            LabelCount.Content = "Total warnings: " + filtered.Count.ToString();
        }

        private void CheckBoxFilters_Unchecked(object sender, RoutedEventArgs e)
        {
            if (Warnings == null || Filters == null)
                return;
            Table.ItemsSource = Warnings;
            LabelCount.Content = "Total warnings: " + Warnings.Count.ToString();
        }
    }
}
